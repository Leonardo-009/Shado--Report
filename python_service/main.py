import os
import logging
import asyncio
import re
from fastapi import FastAPI
from pydantic import BaseModel
from dotenv import load_dotenv
from langchain_ollama import OllamaLLM
from langchain_core.prompts import PromptTemplate
from langchain.schema.runnable import RunnableSequence
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime

load_dotenv()

# Configura√ß√£o de log
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("main")

# Definir endere√ßo do Ollama
OLLAMA_BASE_URL = os.getenv("OLLAMA_BASE_URL", "http://localhost:11434")
llm = None

# FastAPI app
app = FastAPI()

# Middleware de CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=os.getenv("ALLOWED_ORIGINS", "http://localhost:30000").split(","),
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Conectar ao Ollama
@app.on_event("startup")
async def startup_event():
    global llm
    logger.info("Iniciando conex√£o com o Ollama...")
    for tentativa in range(1, 4):
        try:
            logger.info(f"Tentativa {tentativa} de conex√£o com Ollama ({OLLAMA_BASE_URL})...")
            llm = OllamaLLM(
                model="mistral:latest",
                base_url=OLLAMA_BASE_URL,
                temperature=0.7,
                num_ctx=4096,
                num_gpu=40,
                timeout=60.0
            )
            start_time = datetime.now()
            response = await llm.ainvoke("Teste SOC")
            duration = (datetime.now() - start_time).total_seconds()
            logger.info(f"‚úÖ Conectado ao Ollama: {response} (tempo: {duration:.2f}s)")
            return
        except Exception as e:
            logger.error(f"‚ùå Tentativa {tentativa} falhou: {e}")
            if tentativa < 3:
                await asyncio.sleep(2)
    logger.error("‚ùå N√£o foi poss√≠vel conectar ao Ollama.")
    raise Exception("Falha ao conectar ao Ollama ap√≥s 3 tentativas.")

# Modelos de dados
class LogRequest(BaseModel):
    log: str
    categories: list[str] = []
    report_type: str = "base"
    alertName: str = "N√£o dispon√≠vel"
    ruleName: str = "N√£o dispon√≠vel"

class RespondRequest(BaseModel):
    log: str

class PatternsRequest(BaseModel):
    logs: list[str]

# Fun√ß√£o para sauda√ß√£o
def get_saudacao():
    hora = datetime.now().hour
    return "Bom dia" if hora < 12 else "Boa tarde" if hora < 18 else "Boa noite"

# Extra√ß√£o de campos com pr√©-processamento
def extract_log_fields(log: str, alertName: str, ruleName: str):
    if not log or not log.strip():
        logger.error("Log vazio recebido.")
        raise ValueError("Log n√£o pode ser vazio.")
    log = log[:5000].strip()
    log = re.sub(r'\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d+Z', '[TIMESTAMP]', log)
    logger.info(f"Log processado (tamanho: {len(log)} caracteres)")
    return {
        "log": log,
        "saudacao": get_saudacao(),
        "alertName": alertName,
        "ruleName": ruleName
    }

# Template do relat√≥rio padr√£o
report_prompt = PromptTemplate(
    input_variables=["saudacao", "log", "categories", "alertName", "ruleName"],
    template="""Voc√™ √© um analista de seguran√ßa cibern√©tica. Analise o log e gere um relat√≥rio profissional no formato exato abaixo. Preencha apenas os campos dispon√≠veis no log, usando "N√£o dispon√≠vel" para os ausentes. Use linguagem objetiva e evite jarg√µes excessivos.

Prezados(as), {saudacao}.

Atividade suspeita detectada. Detalhes para valida√ß√£o:

Caso de uso: [Descreva o evento com base no log]

üïµ An√°lise: [Forne√ßa uma an√°lise t√©cnica do evento]

üìä Fonte: [Identifique a fonte do log, ex.: Windows Event Log, Syslog, ou "N√£o dispon√≠vel"]

üö® Severidade: [Classifique a severidade, ex.: Baixa, Moderada, Alta]

üßæ Evid√™ncias:
Data do Log: [Data e hora do evento]
Fonte do Log: [Sistema ou componente que gerou o log]
Usu√°rio de Origem: [Usu√°rio que iniciou a atividade, se aplic√°vel]
Usu√°rio Afetado: [Usu√°rio impactado, se aplic√°vel]
IP/Host de Origem: [IP ou host que iniciou a atividade]
IP/Host Afetado: [IP ou host impactado]
Localiza√ß√£o (Origem/Impactado): [Localiza√ß√£o geogr√°fica ou l√≥gica, se dispon√≠vel]
Tipo do Evento: [Tipo de evento, ex.: acesso n√£o autorizado]
Grupo: [Categoria do evento, ex.: seguran√ßa web, autentica√ß√£o]
Objeto: [Recurso alvo, ex.: diret√≥rio, arquivo]
Nome do Objeto: [Nome espec√≠fico do recurso]
Tipo do Objeto: [Tipo de recurso, ex.: diret√≥rio web, banco de dados]
Assunto: [Resumo do evento, ex.: tentativa de acesso a diret√≥rio restrito]
Pol√≠tica: [Pol√≠tica de seguran√ßa violada, se aplic√°vel]
Nome da Amea√ßa: [Nome da amea√ßa, ex.: sondagem automatizada]
Nome do Processo: [Processo envolvido, se aplic√°vel]
Nome da Regra MPE: [Nome da regra]
Mensagem do Fornecedor: [Mensagem ou c√≥digo de erro do sistema]
ID do Fornecedor: [Identificador √∫nico do evento, se dispon√≠vel]
Identificador de Navegador: [User-agent ou identificador, se aplic√°vel]
A√ß√£o: [A√ß√£o realizada, ex.: tentativa de acesso]
Status: [Status da a√ß√£o, ex.: sucesso, falha]
Resultado: [Resultado final, ex.: bloqueado, permitido]

üïµ Justificativa: [Explique o motivo da suspeita com base no log]

üìå Recomenda√ß√µes:
[Recomenda√ß√£o pr√°tica com base no log]
[Recomenda√ß√£o adicional para mitigar o evento]

*Log*: {log}
"""
)

# Template do relat√≥rio de refino de regra
refine_rule_prompt = PromptTemplate(
    input_variables=["saudacao", "log", "alertName", "ruleName"],
    template="""Voc√™ √© um analista de seguran√ßa cibern√©tica especializado em an√°lise de monitoramento e refino de regras. Sua tarefa √© analisar o log fornecido, identificar o evento ocorrido, determinar se o alerta gerado √© um falso positivo e redigir uma solicita√ß√£o clara, concisa e profissional para a equipe de sustenta√ß√£o, solicitando a valida√ß√£o de um poss√≠vel refino da regra.

O relat√≥rio deve seguir rigorosamente o modelo abaixo, preenchendo todos os campos com base no log. Se uma informa√ß√£o n√£o estiver dispon√≠vel, use "N√£o dispon√≠vel". Use linguagem t√©cnica, por√©m clara, adequada para a equipe de sustenta√ß√£o.

*Instru√ß√µes*:
*Cabe√ßalho*: Inclua o nome da regra no t√≠tulo. Use "N/A" se n√£o dispon√≠vel no log.
*Sauda√ß√£o e Introdu√ß√£o*: Use uma sauda√ß√£o profissional (ex.: "Prezados, bom dia") e explique brevemente o contexto do alerta, destacando a possibilidade de falsos positivos.
*Justificativa*: 
*Exemplo de evento relevante*: Descreva o evento detectado (ex.: data, IP, a√ß√£o, sistema afetado) com base no log.
*Motivo do falso positivo*: Explique por que o alerta √© considerado um falso positivo (ex.: atividade leg√≠tima, comportamento esperado de uma aplica√ß√£o).
*Solicita√ß√£o*: Formule uma solicita√ß√£o clara para a equipe de sustenta√ß√£o, sugerindo a√ß√µes espec√≠ficas (ex.: exclus√£o de IPs, ajuste de par√¢metros, revis√£o de assinaturas).
*Campos ausentes*: Use "N√£o dispon√≠vel" para campos sem informa√ß√£o no log.
*Formata√ß√£o*: Siga exatamente o modelo abaixo, incluindo quebras de linha e emojis. Retorne o relat√≥rio em texto puro, sem formata√ß√£o adicional (ex.: markdown, HTML).

**Modelo do Relat√≥rio**:

Prezados(as), {saudacao}. Identificamos um alerta gerado pela regra "{ruleName}" no SIEM, que pode estar gerando falsos positivos, impactando a efici√™ncia do monitoramento. [Explique brevemente o que est√° acontecendo com base no evento do log].

üìù Solicita√ß√£o:  
[Solicita√ß√£o clara para a equipe de sustenta√ß√£o, ex.: "Solicitamos a valida√ß√£o da regra para verificar se ajustes s√£o necess√°rios, como exclus√£o de IPs espec√≠ficos, ajuste de par√¢metros ou revis√£o de assinaturas."]

üéØ Justificativa:  
Exemplo de evento relevante: [Descri√ß√£o do evento detectado, incluindo detalhes como data, IP, a√ß√£o ou sistema afetado]

üîé Exemplo de Evento Relevante:  
[Inserir exemplo do evento considerado v√°lido ou suspeito, com os principais campos: IP, usu√°rio, hostname, etc.]

üìå Motivo do Falso Positivo:  
[Explica√ß√£o sobre por que o alerta gerado foi considerado um falso positivo. Ex: tarefa agendada leg√≠tima, scanner interno autorizado, etc.]

A√ß√£o: [A√ß√£o realizada, ex.: tentativa de acesso]  
Nome da Regra MPE: {ruleName}

üìå Considera√ß√µes Finais:  
[Observa√ß√µes adicionais que devem ser levadas em conta no refino ‚Äì Ex: ajustar hor√°rios de sensibilidade, whitelisting de host, correla√ß√£o com outros eventos, etc.]

üìÑ Nome da Regra: {ruleName}  
üìÑ Nome do Alerta: {alertName}  
üìÑ Amostra do ID: [ID do alerta gerado]  
üìÑ Amostra do Log Recebido: {log}  
üìÇ Caso no SIEM: [N√∫mero do chamado criado no SIEM]

Gere o relat√≥rio EXATAMENTE no formato especificado, preenchendo todos os campos com base no log fornecido.
"""
)

# Template do relat√≥rio de sa√∫de do SIEM
siem_health_prompt = PromptTemplate(
    input_variables=["saudacao", "log"],
    template="""Voc√™ √© um analista de seguran√ßa cibern√©tica especializado em monitoramento e manuten√ß√£o da sa√∫de de sistemas SIEM. Sua tarefa √© analisar o log fornecido, identificar poss√≠veis problemas relacionados √† sa√∫de do SIEM (ex.: falhas na coleta de logs, atrasos, falsos positivos, regras mal configuradas, integra√ß√µes inativas) e redigir um relat√≥rio claro, conciso e profissional para a equipe de manuten√ß√£o do SIEM, solicitando valida√ß√£o ou a√ß√µes corretivas. O relat√≥rio deve seguir rigorosamente o modelo abaixo, preenchendo todos os campos com base no log. Se uma informa√ß√£o n√£o estiver dispon√≠vel, use "N√£o dispon√≠vel". Use linguagem t√©cnica, mas acess√≠vel, adequada para a equipe de manuten√ß√£o.

*Instru√ß√µes*:
*Caso de uso*: Descreva o problema identificado (ex.: falha na coleta de logs, atraso na ingest√£o) com base no log.
*Justificativa*: Explique por que o evento indica um problema na sa√∫de do SIEM, considerando impacto (ex.: lacunas no monitoramento) e gravidade.
*Objetivo do caso de uso*: Especifique o objetivo da an√°lise (ex.: garantir coleta em tempo real, corrigir regras mal configuradas).
*Fonte de dados*: Use "Windows Event Log" para logs XML, "Syslog" para logs Syslog, ou "N/A" se n√£o identific√°vel.
*Campos ausentes*: Use "N√£o dispon√≠vel" para campos sem informa√ß√£o no log.
*Resultado*: Derive do campo 'message' (ex.: "Failed" para "Log collection failed") ou use "N/A" se n√£o aplic√°vel.
*Status*: Use "N/A" a menos que o log forne√ßa um campo 'status' expl√≠cito.
*Formata√ß√£o*: Siga exatamente o modelo abaixo, incluindo quebras de linha e emojis. Retorne o relat√≥rio em texto puro, sem formata√ß√£o adicional (ex.: markdown, HTML).

*Modelo do Relat√≥rio*:

Prezados(as), {saudacao}.

Nossa equipe identificou uma poss√≠vel quest√£o relacionada √† sa√∫de do SIEM que requer valida√ß√£o. Seguem abaixo mais detalhes para an√°lise:

Caso de uso: [Descri√ß√£o do caso de uso, ex.: "Verificar a integridade da coleta de logs para identificar falhas ou atrasos na ingest√£o de dados."]

üïµ Justificativa para abertura do caso: [Explica√ß√£o do motivo pelo qual o log indica um problema, ex.: "O log mostra um atraso significativo na ingest√£o de dados, sugerindo problemas na integra√ß√£o com a fonte de dados."]

Objetivo do caso de uso: [Objetivo da an√°lise, ex.: "Garantir que os logs sejam coletados em tempo real para evitar lacunas no monitoramento de seguran√ßa."]

üìä Fonte de dados utilizada na an√°lise: [Fonte dos dados, ex.: "Windows Event Log", "Syslog", "N/A"]

üßæ Evid√™ncias:
Data do Log: [Data e hora do evento]
Fonte do Log: [Sistema ou componente que gerou o log, ex.: agente SIEM]
Usu√°rio de Origem: [Usu√°rio associado, se aplic√°vel]
Usu√°rio Afetado: [Usu√°rio impactado, se aplic√°vel]
IP/Host de Origem: [IP ou host que gerou o evento]
IP/Host Afetado: [IP ou host impactado]
Localiza√ß√£o (Origem/Impactado): [Localiza√ß√£o geogr√°fica ou l√≥gica, se dispon√≠vel]
Tipo do Evento: [Tipo de evento, ex.: falha de integra√ß√£o]
Grupo: [Categoria do evento, ex.: sa√∫de do SIEM]
Objeto: [Recurso alvo, ex.: conector]
Nome do Objeto: [Nome espec√≠fico do recurso, ex.: Conector_Firewall_X]
Tipo do Objeto: [Tipo de recurso, ex.: conector]
Assunto: [Resumo do evento, ex.: falha na coleta de logs]
Pol√≠tica: [Pol√≠tica ou configura√ß√£o relevante, se aplic√°vel]
Nome da Amea√ßa: [Nome do problema, ex.: atraso na ingest√£o]
Nome do Processo: [Processo envolvido, ex.: ingest√£o de logs]
Nome da Regra MPE: [Regra que disparou o alerta, se aplic√°vel]
Mensagem do Fornecedor: [Mensagem ou c√≥digo de erro do sistema]
ID do Fornecedor: [Identificador √∫nico do evento, se dispon√≠vel]
Identificador de Navegador: [User-agent, se aplic√°vel, ou "N√£o dispon√≠vel"]
A√ß√£o: [A√ß√£o relacionada, ex.: tentativa de coleta]
Status: [Status da a√ß√£o, ex.: falha]
Resultado: [Resultado final, ex.: log n√£o coletado]

*Log fornecido*: {log}

Gere o relat√≥rio EXATAMENTE no formato especificado, preenchendo todos os campos com base no log fornecido.
"""
)

# Rota principal
@app.get("/")
async def root():
    return {"message": "üöÄ Servi√ßo SOC"}

# Rota para an√°lise de logs
@app.post("/analyze")
async def analyze(request: LogRequest):
    logger.info(f"Solicita√ß√£o recebida: log='{request.log[:50]}...' categories={request.categories} report_type='{request.report_type}' alertName='{request.alertName}' ruleName='{request.ruleName}'")
    
    try:
        fields = extract_log_fields(request.log, request.alertName, request.ruleName)
        fields["categories"] = ", ".join(request.categories) if request.categories else "gerenciamento de acesso"

        if request.report_type == "refine":
            report_chain = RunnableSequence(refine_rule_prompt | llm)
        elif request.report_type == "siem-health":
            report_chain = RunnableSequence(siem_health_prompt | llm)
        else:
            report_chain = RunnableSequence(report_prompt | llm)

        logger.info("Iniciando gera√ß√£o do relat√≥rio com Ollama...")
        start_time = datetime.now()
        report = await asyncio.wait_for(
            report_chain.ainvoke(fields),
            timeout=60.0
        )
        report = report.strip().replace("\r\n", "\n").replace("\n\n", "\n")
        duration = (datetime.now() - start_time).total_seconds()
        logger.info(f"Relat√≥rio gerado em {duration:.2f}s")
        return {
            "input_log": request.log,
            "resposta": report
        }
    except asyncio.TimeoutError:
        logger.error("Timeout ao gerar relat√≥rio")
        return {
            "input_log": request.log,
            "resposta": "Erro: Timeout ao processar o log. Verifique a conex√£o com o Ollama."
        }
    except Exception as e:
        logger.error(f"Erro ao gerar relat√≥rio: {e}")
        return {
            "input_log": request.log,
            "resposta": f"Erro ao processar o log: {str(e)}. Verifique o log ou a conex√£o com o Ollama."
        }

# Rota para resposta a incidentes
@app.post("/respond")
async def respond(request: RespondRequest):
    try:
        fields = extract_log_fields(request.log, "N√£o dispon√≠vel", "N√£o dispon√≠vel")
        logger.info("Iniciando gera√ß√£o de a√ß√µes de mitiga√ß√£o...")
        start_time = datetime.now()
        actions = await asyncio.wait_for(
            llm.ainvoke(f"Sugira 3 a√ß√µes para mitigar o evento no log: {request.log[:500]}. Baseie-se em NIST SP 800-53 ou CIS Controls."),
            timeout=60.0
        )
        duration = (datetime.now() - start_time).total_seconds()
        logger.info(f"A√ß√µes geradas em {duration:.2f}s")
        return {"resposta": actions.strip(), "input_log": request.log}
    except asyncio.TimeoutError:
        logger.error("Timeout ao responder")
        return {
            "input_log": request.log,
            "resposta": "Erro: Timeout ao processar o log. Verifique a conex√£o com o Ollama."
        }
    except Exception as e:
        logger.error(f"Erro ao responder: {e}")
        return {
            "input_log": request.log,
            "resposta": f"Erro ao processar o log: {str(e)}. Verifique o log ou a conex√£o com o Ollama."
        }

# Rota para an√°lise de padr√µes
@app.post("/patterns")
async def patterns(request: PatternsRequest):
    try:
        if not request.logs or not any(log.strip() for log in request.logs):
            logger.error("‚ùå Lista de logs vazia.")
            return {
                "input_logs": request.logs,
                "resposta": "Erro: Forne√ßa pelo menos um log v√°lido."
            }
        
        logger.info("Iniciando an√°lise de padr√µes...")
        start_time = datetime.now()
        patterns = await asyncio.wait_for(
            llm.ainvoke(f"Identifique padr√µes nos logs: {', '.join([log[:250] for log in request.logs if log.strip()])}. Descreva os padr√µes e implica√ß√µes de seguran√ßa."),
            timeout=60.0
        )
        duration = (datetime.now() - start_time).total_seconds()
        logger.info(f"Padr√µes analisados em {duration:.2f}s")
        return {"resposta": patterns.strip(), "input_logs": request.logs}
    except asyncio.TimeoutError:
        logger.error("Timeout ao analisar padr√µes")
        return {
            "input_logs": request.logs,
            "resposta": "Erro: Timeout ao processar os logs. Verifique a conex√£o com o Ollama."
        }
    except Exception as e:
        logger.error(f"Erro ao analisar padr√µes: {e}")
        return {
            "input_logs": request.logs,
            "resposta": f"Erro ao processar os logs: {str(e)}. Verifique os logs ou a conex√£o com o Ollama."
        }